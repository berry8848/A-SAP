#define _CRT_SECURE_NO_WORNINGS
#define _USE_MATH_DEFINES
#include <iostream>
#include <cmath>
#include <opencv2/opencv.hpp>
#include <opencv2/highgui/highgui.hpp>
using namespace std;
using namespace cv;
string win_src = "src";
string win_dst = "dst";

int main()
{
	Mat img_src, img_dst;
	Mat gray_img;
	Mat edge;
	VideoCapture capture(0);//カメラオープン
	if (!capture.isOpened()) {
		cout << "error" << endl;
		return -1;
	}

	//ウインドウ生成
	namedWindow(win_src, WINDOW_AUTOSIZE);
	namedWindow(win_dst, WINDOW_AUTOSIZE);
	namedWindow("Harris",WINDOW_AUTOSIZE);
	namedWindow("Fast",  WINDOW_AUTOSIZE);

	while (1) {
		capture >> img_src; //カメラ映像の読み込み

		//円検出
		//グレースケール変換
		cvtColor(img_src, img_dst, COLOR_BGR2GRAY);
		// 平滑化を行います．これがないと誤検出が起こりやすくなります．
		GaussianBlur(img_dst, img_dst, Size(9, 9), 2, 2);
		vector<Vec3f> circles;
		// 円を検出し、circlesに書き込む
		HoughCircles(img_dst, circles, HOUGH_GRADIENT, 1, img_dst.rows / 4, 50, 25, 0.1); //関数の説明 https://shikaku-mafia.com/cv2-houghcircles/
		for (size_t i = 0; i < circles.size(); i++)
		{
			Point center(cvRound(circles[i][0]), cvRound(circles[i][1]));
			int radius = cvRound(circles[i][2]);
			// 円の中心を描画します．
			circle(img_dst, center, 3, Scalar(0, 255, 0), -1, 8, 0); //関数の説明 http://opencv.jp/opencv-2svn/cpp/drawing_functions.html
			// 円を描画します．
			circle(img_dst, center, radius, Scalar(0, 0, 255), 3, 8, 0);
		}


		//コーナー検出  
		//参考：http://opencv.jp/opencv2-x-samples/corner_detection/
		// (1)load a specified file as a 3-channel color image
		Mat harris_img = img_src.clone();
		Mat fast_img = img_src.clone();

		// (2)convert to a grayscale image and normalize it
		cvtColor(img_src, gray_img, COLOR_BGR2GRAY);
		normalize(gray_img, gray_img, 0, 255, NORM_MINMAX);
		
		// (3)detect and draw strong corners on the image based on Eigen Value
		vector<Point2f> corners;
		//goodFeaturesToTrack(gray_img, corners, 80, 0.01, 5);
		vector<Point2f>::iterator it_corner = corners.begin();
		//for (; it_corner != corners.end(); ++it_corner) {
		//	circle(img_src, Point(it_corner->x, it_corner->y), 1, Scalar(0, 200, 255), -1);
		//	circle(img_src, Point(it_corner->x, it_corner->y), 8, Scalar(0, 200, 255));
		//}

		// (4)detect and draw strong corners on the image using Harris detector
		goodFeaturesToTrack(gray_img, corners, 80, 0.01, 3, Mat(), 3, true);
		it_corner = corners.begin();
		for (; it_corner != corners.end(); ++it_corner) {
			circle(harris_img, Point(it_corner->x, it_corner->y), 1, Scalar(0, 255, 0), -1);
			circle(harris_img, Point(it_corner->x, it_corner->y), 8, Scalar(0, 255, 0));
		}

		// (5)detect corners using high-speed corner detection; FAST
		//int threshold = 100;
		//bool nonmax = true;
		//vector<KeyPoint> keypoints;
		//FAST(gray_img, keypoints, threshold, nonmax);
		//vector<KeyPoint>::iterator it_kp = keypoints.begin();
		//for (; it_kp != keypoints.end(); ++it_kp) {
		//	circle(fast_img, Point(it_kp->pt.x, it_kp->pt.y), 1, Scalar(50, 0, 255), -1);
		//	circle(fast_img, Point(it_kp->pt.x, it_kp->pt.y), 8, Scalar(50, 0, 255));
		//}

		//核終了
		imshow(win_src, img_src); //入力画像を表示
		imshow(win_dst, img_dst); //出力画像を表示
		imshow("Harris", harris_img);
		//imshow("Fast", fast_img);
		if (waitKey(1) == 'q') break; //qキーで終了
	}

	capture.release();
	return 0;
}