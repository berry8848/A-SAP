#define _CRT_SECURE_NO_WORNINGS
#define _USE_MATH_DEFINES
#include <iostream>
#include <cmath>
#include <opencv2/opencv.hpp>
#include <opencv2/highgui/highgui.hpp> //画像入出力＆GUI操作用
#include <string> //csvファイル書き込み用
#include <fstream> //csvファイル書き込み用
#include <algorithm> //sort関数用
using namespace std;
using namespace cv;
string win_src = "src";
string win_dst = "dst";
#define SEARCH_RANGE 2
#define NUMBER_OF_CORNERS 24
#define NUMBER_OF_MASTERS 6


//範囲内で0以外の値を取るラベルを返す
int searchLabelInRange(const Point2f& corner, Mat& labels, vector<vector<Point2f>>& master_labels) {
    // 画像の幅と高さを取得
    int width = labels.cols;
    int height = labels.rows;

    for (int x = corner.x - SEARCH_RANGE; x <= corner.x + SEARCH_RANGE; ++x) {
        for (int y = corner.y - SEARCH_RANGE; y <= corner.y + SEARCH_RANGE; ++y) {
            if (x < 0 || width <= x || y < 0 || height <= y) continue;
            int label_num = labels.at<int>(y, x);
            if (label_num != 0) {
                master_labels[label_num - 1.0].push_back(corner);
                return label_num;
            }
        }
    }
    cout << "ERROR：コーナーのラベル付けができませんでした．" << endl;
    return 0;
}

//各行の列のサイズを確認し，指定した列のサイズ以外の時エラーメッセージを表示
void checkColumnSize(const vector<vector<Point2f>>& matrix) {
    int expectedSize = NUMBER_OF_CORNERS / NUMBER_OF_MASTERS;
    for (int targetRow = 0; targetRow < matrix.size(); ++targetRow) {
        int actualColumnSize = matrix[targetRow].size();  // 列のサイズは最初の行の要素数とする
        if (actualColumnSize != expectedSize) {
            cout << "ERROR: Row " << targetRow << " は期待しているサイズ数ではありません．" << endl;
        }
    }
}

int main()
{
    //ファイル書き込み
    string output_csv_file_path = "Output/result.csv";
    // 書き込むcsvファイルを開く(std::ofstreamのコンストラクタで開く)
    ofstream ofs_csv_file(output_csv_file_path);

    Mat img_src;
    //カメラ使用時
    VideoCapture capture(0);//カメラオープン
    if (!capture.isOpened()) {
        cout << "error" << endl;
        return -1;
    }
    // 撮影画像サイズの設定
    bool bres = capture.set(cv::CAP_PROP_FRAME_WIDTH, 1920);
    if (bres != true) {
        return -1;
    }
    bres = capture.set(cv::CAP_PROP_FRAME_HEIGHT, 1080);
    if (bres != true) {
        return -1;
    }
    // 撮影画像取得高速化の工夫
    bres = capture.set(cv::CAP_PROP_FOURCC, cv::VideoWriter::fourcc('M', 'J', 'P', 'G'));
    if (bres != true) {
        return -1;
    }
    //コーナー検出
    // 参考：http://opencv.jp/opencv2-x-samples/corner_detection/
    //１枚だけ写真を撮る ※現在，画像の読み込みに変更
    capture >> img_src; //カメラ映像の読み込み
    Mat result_img = img_src.clone(); //出力画像用 
     
// 画像を保存する
    std::string filename = "captured_image.jpg";
    bool success = cv::imwrite(filename, img_src);
    if (!success) {
        std::cout << "Failed to save the image." << std::endl;
        return -1;
    }

    std::cout << "Image saved as " << filename << std::endl;

    return 0;
}
